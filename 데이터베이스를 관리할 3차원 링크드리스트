#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct node // 1:n 관계를 지원하기위해, data 들을 연결하는 list
{
	char key[40];
	char value[40];
	struct node *next;
	struct node *prev;
}node;

typedef struct varnode // 1:n 관계를 지원하기위해, data를 그룹화 시키는 변수명
{
	char varname[40];
	struct node *head, *tail, *current;
	struct varnode *next, *prev;
}varnode;

typedef struct list
{
	char tname[40];
	struct varnode *head, *tail, *current;
	struct list *next, *prev;
}list;

list *makelist(void); // 3차원 리스트 생성
void putlist(list **head, list **tail, list *current); // 3차원 리스트에 항목 추가

void simpleinput(list *head); // 변수에 대입

void putnode(node **head, node **tail, node *current);

varnode *makevarnode(void);

node * makedatanode(void);

list *findtable(list *head);
varnode *findvar(varnode *head);

void search(list *head);
int search_var(varnode *head);

void deltable(list **head, list **tail);
void delvar(varnode **head, varnode **tail);
void killvar(list *head);

void printtable(list *head);
void printlist(varnode *head);
void printnode(node *head);
int main(void)
{
	list *head, *tail, *current;

	int mode = 0;

	head = tail = current = NULL;
	while (1)
	{
		puts("[1] 테이블 생성");
		puts("[2] 테이블 입력");
		puts("[3] 테이블 삭제");
		puts("[4] 데이터 삭제");
		puts("[5] 출력");
		puts("[6] 검색");
		puts("[0] 종료");
		scanf("%d%*c", &mode);
		if (mode == 1)
		{
			current = makelist();
			putlist(&head, &tail, current);
		}
		else if (mode == 2)
		{
			simpleinput(head);
		}
		else if (mode == 3)
		{
			deltable(&head, &tail);
		}
		else if (mode == 4)
		{
			killvar(head);
		}
		else if (mode == 5)
		{
			printtable(head);
		}
		else if (mode == 6)
		{
			search(head);
		}
		else if (mode == 0)
		{
			exit(1);
		}
		else
		{
			continue;
		}
	}
}


void putlist(list **head, list **tail, list *current)
{
	if (*head == NULL)
	{
		*head = *tail = current;
	}
	else
	{
		(*tail)->next = current;
		current->prev = *tail;
		*tail = current;
	}
}
void putvar(varnode **head, varnode **tail, varnode *current)
{
	if (*head == NULL)
	{
		*head = *tail = current;
	}
	else
	{
		(*tail)->next = current;
		current->prev = *tail;
		*tail = current;
	}
}
void putnode(node **head, node **tail, node *current)
{
	if (*head == NULL)
	{
		*head = *tail = current;
	}
	else
	{
		(*tail)->next = current;
		current->prev = *tail;
		*tail = current;
	}
}
void simpleinput(list *head)
{
	list *temp;
	temp = findtable(head);
	if (temp != NULL)
	{
		temp->current = makevarnode();
		putvar(&temp->head, &temp->tail, temp->current);
		temp->current->current = makedatanode();
		putnode(&temp->current->head, &temp->current->tail, temp->current->current);
	}
}

list *findtable(list *head)
{
	char tname[40];
	puts("테이블의 이름을 입력하여 주십시오.");
	scanf("%s%*c", tname);
	while (head)
	{
		if (strcmp(tname, head->tname) == 0)
		{
			return head;
		}
		else
		{
			head = head->next;
		}
	}
	return NULL;
}
varnode *findvar(varnode *head)
{
	char varname[40];
	puts("변수명을 입력하여 주십시오.");
	scanf("%s%*c", varname);
	while (head)
	{
		if (strcmp(varname, head->varname) == 0)
			return head;
		else
			head = head->next;
	}
	return NULL;
}
list *makelist(void)
{
	list *temp;
	temp = (list*)calloc(1, sizeof(list));
	puts("테이블의 이름을 입력하여 주십시오.");
	scanf("%s%*c", temp->tname);
	return temp;
}

varnode *makevarnode(void)
{
	varnode *temp;
	temp = (varnode*)calloc(1, sizeof(varnode));
	puts("Key 를 입력하여 주십시오.");
	scanf("%s%*c", temp->varname);
	return temp;
}
node * makedatanode(void)
{
	node *temp;
	temp = (node*)calloc(1, sizeof(node));
	puts("Value 입력");
	scanf("%s%*c", temp->value);
	return temp;
}

void deltable(list **head, list **tail)
{
	list *temp;
	temp = findtable(*head);
	if (!temp)
		return;
	else if (temp == *head)
	{
		*head = (*head)->next;
		if (*head != NULL)
		{
			(*head)->prev = NULL;
		}
		free(temp);
	}
	else if (temp == *tail)
	{
		*tail = temp->prev;
		if (*tail != NULL)
			(*tail)->next = NULL;
		free(temp);
	}
	else
	{
		temp->prev->next = temp->next;
		temp->next->prev = temp->prev;
		free(temp);
	}
}
void delvar(varnode **head, varnode **tail)
{
	varnode *temp;
	temp = findvar(*head);
	if (!temp)
		return;
	else if (temp == *head)
	{
		*head = (*head)->next;
		if (*head != NULL)
		{
			(*head)->prev = NULL;
		}
		free(temp);
	}
	else if (temp == *tail)
	{
		*tail = temp->prev;
		if (*tail != NULL)
			(*tail)->next = NULL;
		free(temp);
	}
	else
	{
		temp->prev->next = temp->next;
		temp->next->prev = temp->prev;
		free(temp);
	}
}
void killvar(list *head)
{
	list *temp;
	temp = findtable(head);
	if (!temp)
		return;
	delvar(&temp->head, &temp->tail);
}

void printtable(list *head)
{
	list *temp;
	temp = findtable(head);
	if (temp != NULL)
	{
		printlist(temp->head);
	}
	else
	{
		puts("테이블이 없습니다.");
	}
}
void printlist(varnode *head)
{
	while (head)
	{
		printf("%s : ", head->varname);
		printnode(head->head);
		puts("");
		head = head->next;
	}
}
void printnode(node *head)
{
	while (head)
	{
		printf("%s", head->value);
		head = head->next;
	}
}
void search(list *head)
{
	list *temp;
	temp = findtable(head);
	if (!temp)
	{
		puts("테이블이 없습니다.");
	}
	else
	{
		if (!search_var(temp->head))
		{

		}
	}
}
int search_var(varnode *head)
{
	char varname[40];
	puts("검색할 변수를 입력하여 주십시오.");
	scanf("%s%*c", varname);
	while (head)
	{
		if (strcmp(head->varname, varname) == 0)
		{
			printf("%s : %s\n", head->varname, head->head->value);
			return 1;
		}
		else
		{
			head = head->next;
		}
	}
	return 0;
}
